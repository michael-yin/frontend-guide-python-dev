{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction This guide is written for Python developers . It's to help you to learn the MODERN frontend techs. It contains details of the different architectures, you can learn and choose the correct one for your Python web project. Now matter if you are using Django, Flask, FastAPI, this guide can help. It is open source , and I wish the whole community can help improve it to help more people. Other projects based-jace/combining-flask-with-vue","title":"Introduction"},{"location":"#introduction","text":"This guide is written for Python developers . It's to help you to learn the MODERN frontend techs. It contains details of the different architectures, you can learn and choose the correct one for your Python web project. Now matter if you are using Django, Flask, FastAPI, this guide can help. It is open source , and I wish the whole community can help improve it to help more people.","title":"Introduction"},{"location":"#other-projects","text":"based-jace/combining-flask-with-vue","title":"Other projects"},{"location":"basic_concepts/","text":"Terminology ES6 ES6 (ECMAScript 6) is also known as ECMAScript 2015, which is a major version of Javascript and contains many important features. So far, the latest version is ES11, and you can check ECMAScript to learn more. The syntax shipped with ES6 can make our JS code more readable and maintainable . For example, the template literals makes the string manipulation more clean. /*BEFORE ES6*/ var name = 'Hello World' ; var message = 'Hey' + name + ',' ; /*ES6*/ let name = 'Hello World' ; let message = `Hey ${ name } ,` ; As you can see, the syntax is very similar with Python f-String syntax. To know more about the modern JS syntax, please check ES2015+ cheatsheet TypeScript TypeScript is a strict syntactical superset of JavaScript and adds optional static typing to the language function add ( left : number , right : number ) : number { return left + right ; } As you can see, the syntax is very similar with Python type annotations. Please check TypeScript Doc to learn more. Babel Now you understand what modern Javascript (ES6+) is, how to make the modern JS code work on some old browser? Babel is a JavaScript transcompiler that is mainly used to convert ECMAScript 2015+ (ES6+) code into a backwards compatible version of JavaScript that can be run by older JavaScript engines . SCSS The SCSS syntax uses the file extension .scss . With a few small exceptions, it\u2019s a superset of CSS If we write SCSS nav { ul { margin : 0 ; padding : 0 ; list-style : none ; } li { display : inline-block ; } a { display : block ; padding : 6px 12px ; text-decoration : none ; } } The generated css will look like this nav ul { margin : 0 ; padding : 0 ; list-style : none ; } nav li { display : inline-block ; } nav a { display : block ; padding : 6 px 12 px ; text-decoration : none ; } You can check https://sass-lang.com/guide to learn more about SCSS. Webpack Webpack is a bundle tool, it can transform Javascript, HTML, CSS and other assets to bundle files. For example, with proper configuration, Webpack can use relevant plugins to work with Babel to compile ES6 code, and use scss , css-loader to bundle css files. React, Vue React and Vue are both open source frontend Javascript library for building web UI. You can check React doc or Vue doc to learn more. Alpine.js For people who think React and Vue is heavy, you can try Alpine.js, which can let you build component directly in HTML. The syntax of Alpine.js is very similar with the Vue.js, and it is easy to learn. < html > < head > < script defer src = \"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" ></ script > </ head > < body > < h1 x-data = \"{ message: 'I \u2764\ufe0f Alpine' }\" x-text = \"message\" ></ h1 > </ body > </ html > As you can see, you can even import Alpine.js using CDN link without using any bundle solution. You can check Alpine.js doc to learn more.","title":"Terminology"},{"location":"basic_concepts/#terminology","text":"","title":"Terminology"},{"location":"basic_concepts/#es6","text":"ES6 (ECMAScript 6) is also known as ECMAScript 2015, which is a major version of Javascript and contains many important features. So far, the latest version is ES11, and you can check ECMAScript to learn more. The syntax shipped with ES6 can make our JS code more readable and maintainable . For example, the template literals makes the string manipulation more clean. /*BEFORE ES6*/ var name = 'Hello World' ; var message = 'Hey' + name + ',' ; /*ES6*/ let name = 'Hello World' ; let message = `Hey ${ name } ,` ; As you can see, the syntax is very similar with Python f-String syntax. To know more about the modern JS syntax, please check ES2015+ cheatsheet","title":"ES6"},{"location":"basic_concepts/#typescript","text":"TypeScript is a strict syntactical superset of JavaScript and adds optional static typing to the language function add ( left : number , right : number ) : number { return left + right ; } As you can see, the syntax is very similar with Python type annotations. Please check TypeScript Doc to learn more.","title":"TypeScript"},{"location":"basic_concepts/#babel","text":"Now you understand what modern Javascript (ES6+) is, how to make the modern JS code work on some old browser? Babel is a JavaScript transcompiler that is mainly used to convert ECMAScript 2015+ (ES6+) code into a backwards compatible version of JavaScript that can be run by older JavaScript engines .","title":"Babel"},{"location":"basic_concepts/#scss","text":"The SCSS syntax uses the file extension .scss . With a few small exceptions, it\u2019s a superset of CSS If we write SCSS nav { ul { margin : 0 ; padding : 0 ; list-style : none ; } li { display : inline-block ; } a { display : block ; padding : 6px 12px ; text-decoration : none ; } } The generated css will look like this nav ul { margin : 0 ; padding : 0 ; list-style : none ; } nav li { display : inline-block ; } nav a { display : block ; padding : 6 px 12 px ; text-decoration : none ; } You can check https://sass-lang.com/guide to learn more about SCSS.","title":"SCSS"},{"location":"basic_concepts/#webpack","text":"Webpack is a bundle tool, it can transform Javascript, HTML, CSS and other assets to bundle files. For example, with proper configuration, Webpack can use relevant plugins to work with Babel to compile ES6 code, and use scss , css-loader to bundle css files.","title":"Webpack"},{"location":"basic_concepts/#react-vue","text":"React and Vue are both open source frontend Javascript library for building web UI. You can check React doc or Vue doc to learn more.","title":"React, Vue"},{"location":"basic_concepts/#alpinejs","text":"For people who think React and Vue is heavy, you can try Alpine.js, which can let you build component directly in HTML. The syntax of Alpine.js is very similar with the Vue.js, and it is easy to learn. < html > < head > < script defer src = \"https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js\" ></ script > </ head > < body > < h1 x-data = \"{ message: 'I \u2764\ufe0f Alpine' }\" x-text = \"message\" ></ h1 > </ body > </ html > As you can see, you can even import Alpine.js using CDN link without using any bundle solution. You can check Alpine.js doc to learn more.","title":"Alpine.js"},{"location":"classic/","text":"Classic architecture Diagram The frontend app compile and bundle frontend assets After it finish building, the built assets can be found at STATIC directory. Django or Flask will treat the built assets as normal files and do not care where they come from . Django or Flask will add the JS and CSS link to the template to make sure browser can download them. Workflow Notes: When user visit the website, Python web server process the request, render HTML from using Django template or Jinja. The browser download CSS, JS and other assets and render web page. Benefits of the modern frontend app Some people might ask: Why not just import some JS packages using CDN link Why should we import some bundle solution such as Webpack. Because: Webpack is the most popular bundle solution in the frontend community today, it has received 50k stars on Github. It has a great ecosystem, many plugins, loaders. If we search webpack on npmjs.com, we can get 20k resulst. If we do not need React , Vue , we can still use Webpack to help us compile ES6 , SCSS and do many other things (Many people do not know that!) With a proper config, Webpack can save time and let us build modern web application in quick way. With modern frontend app, it can: Linting JS, SCSS code. Compile SCSS to CSS. Compile and bundle JS files. Watch files and auto reload web page on code change. Frontend We can use python-webpack-boilerplate to jump start frontend project bundled by Webpack. Alpine.js You can also check petite-vue , which is 6kb subset of Vue optimized for progressive enhancement jQuery jQuery is not recommended any more and below notes can help if you want to migrate to vanilla JS Selecting elements with querySelector and querySelectorAll Listening for events with addEventListener Updating CSS and styles through style property Working with classes through the classList property AJAX requests with fetch or Axios Triggering events with dispatchEvent Creating elements with createElement Updating text through the textContent property Adding elements to the DOM with appendChild Please write code with ES6+ syntax to make the JS code more readable. Backend If you want to load Webpack bundle file in Django or Flask: django-webpack-loader python-webpack-boilerplate supports both Django and Flask. Pros and Cons Pros: We can still use Django / Flask template syntax and HTML as we are familiar with We can write JS and SCSS in modern syntax, the code is more readable and easy to maintain. We can import 3-party frontend project without touching template, but use npm install command Code linter can help check JS and CSS code style. Reference Definitive Guide to Django and Webpack","title":"Classic architecture"},{"location":"classic/#classic-architecture","text":"","title":"Classic architecture"},{"location":"classic/#diagram","text":"The frontend app compile and bundle frontend assets After it finish building, the built assets can be found at STATIC directory. Django or Flask will treat the built assets as normal files and do not care where they come from . Django or Flask will add the JS and CSS link to the template to make sure browser can download them.","title":"Diagram"},{"location":"classic/#workflow","text":"Notes: When user visit the website, Python web server process the request, render HTML from using Django template or Jinja. The browser download CSS, JS and other assets and render web page.","title":"Workflow"},{"location":"classic/#benefits-of-the-modern-frontend-app","text":"Some people might ask: Why not just import some JS packages using CDN link Why should we import some bundle solution such as Webpack. Because: Webpack is the most popular bundle solution in the frontend community today, it has received 50k stars on Github. It has a great ecosystem, many plugins, loaders. If we search webpack on npmjs.com, we can get 20k resulst. If we do not need React , Vue , we can still use Webpack to help us compile ES6 , SCSS and do many other things (Many people do not know that!) With a proper config, Webpack can save time and let us build modern web application in quick way. With modern frontend app, it can: Linting JS, SCSS code. Compile SCSS to CSS. Compile and bundle JS files. Watch files and auto reload web page on code change.","title":"Benefits of the modern frontend app"},{"location":"classic/#frontend","text":"We can use python-webpack-boilerplate to jump start frontend project bundled by Webpack. Alpine.js You can also check petite-vue , which is 6kb subset of Vue optimized for progressive enhancement","title":"Frontend"},{"location":"classic/#jquery","text":"jQuery is not recommended any more and below notes can help if you want to migrate to vanilla JS Selecting elements with querySelector and querySelectorAll Listening for events with addEventListener Updating CSS and styles through style property Working with classes through the classList property AJAX requests with fetch or Axios Triggering events with dispatchEvent Creating elements with createElement Updating text through the textContent property Adding elements to the DOM with appendChild Please write code with ES6+ syntax to make the JS code more readable.","title":"jQuery"},{"location":"classic/#backend","text":"If you want to load Webpack bundle file in Django or Flask: django-webpack-loader python-webpack-boilerplate supports both Django and Flask.","title":"Backend"},{"location":"classic/#pros-and-cons","text":"Pros: We can still use Django / Flask template syntax and HTML as we are familiar with We can write JS and SCSS in modern syntax, the code is more readable and easy to maintain. We can import 3-party frontend project without touching template, but use npm install command Code linter can help check JS and CSS code style.","title":"Pros and Cons"},{"location":"classic/#reference","text":"Definitive Guide to Django and Webpack","title":"Reference"},{"location":"code_style/","text":"Code Style CSS, SCSS style Airbnb CSS / Sass Styleguide BEM 101 JS style Airbnb JavaScript Style Guide Linting tool Eslint Stylelint","title":"Code Style"},{"location":"code_style/#code-style","text":"","title":"Code Style"},{"location":"code_style/#css-scss-style","text":"Airbnb CSS / Sass Styleguide BEM 101","title":"CSS, SCSS style"},{"location":"code_style/#js-style","text":"Airbnb JavaScript Style Guide","title":"JS style"},{"location":"code_style/#linting-tool","text":"Eslint Stylelint","title":"Linting tool"},{"location":"jamstack/","text":"Jamstack Jamstack, stands for Javascript, API and Markup (generated by a static site generator) In the Server side rendering mode, we know we need to run a Node web server to render React or Vue component to HTML on the server side. How about this way: In the build stage , we try to render React or Vue component to static HTML (seems like static site generate ) During the build stage , if needed, the Node.js app also send request to the API backend to fetch data. And then, deploy the built HTML to the CDN network. The built app will use Javascript and API to talk to backend service, to enable dynamic content on some pages Web app built with Jamstack is very fast (because of CDN, and the prebuilt HTML) and is very good option for many CMS application. For example, many Wordpress applications now ues Jamstack since it is more fast and secure. Frontend Gatsby Next.js Nuxt.js It is recommended to deploy the frontend app to Netlify Vercel Serverless Functions If you do not understand what is Serverless Functions , you can learn Netlify Functions Backend Django For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project. Flask For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors FastAPI CORSMiddleware Reference jamstack homepage Demo Next.js Django Demo","title":"Jamstack"},{"location":"jamstack/#jamstack","text":"Jamstack, stands for Javascript, API and Markup (generated by a static site generator) In the Server side rendering mode, we know we need to run a Node web server to render React or Vue component to HTML on the server side. How about this way: In the build stage , we try to render React or Vue component to static HTML (seems like static site generate ) During the build stage , if needed, the Node.js app also send request to the API backend to fetch data. And then, deploy the built HTML to the CDN network. The built app will use Javascript and API to talk to backend service, to enable dynamic content on some pages Web app built with Jamstack is very fast (because of CDN, and the prebuilt HTML) and is very good option for many CMS application. For example, many Wordpress applications now ues Jamstack since it is more fast and secure.","title":"Jamstack"},{"location":"jamstack/#frontend","text":"Gatsby Next.js Nuxt.js It is recommended to deploy the frontend app to Netlify Vercel","title":"Frontend"},{"location":"jamstack/#serverless-functions","text":"If you do not understand what is Serverless Functions , you can learn Netlify Functions","title":"Serverless Functions"},{"location":"jamstack/#backend","text":"","title":"Backend"},{"location":"jamstack/#django","text":"For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project.","title":"Django"},{"location":"jamstack/#flask","text":"For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors","title":"Flask"},{"location":"jamstack/#fastapi","text":"CORSMiddleware","title":"FastAPI"},{"location":"jamstack/#reference","text":"jamstack homepage","title":"Reference"},{"location":"jamstack/#demo","text":"Next.js Django Demo","title":"Demo"},{"location":"node_ssr_service/","text":"SSR service This pattern is to solve the SEO problem of the Launch React or Vue in template Workflow Notes: When user visits the website, Python web server process the request If the template contains React / Vue component, send request to the Node.js process to get the HTML of the React / Vue component After that, the final HTML will be returned to the browser. The browser will run JS and attach the event hanlders to the existing DOM elements. This also called rehydration Packages django-react-templatetags hypernova will run as a service, which generate HTML of the React / Vue component (server side rendering) Pros and Cons Pros: It is very flexible and SEO-friendly. Cons: This architecture is not very popular, and there are not many learning resources. Demo Django React SSR Demo","title":"Node SSR service"},{"location":"node_ssr_service/#ssr-service","text":"This pattern is to solve the SEO problem of the Launch React or Vue in template","title":"SSR service"},{"location":"node_ssr_service/#workflow","text":"Notes: When user visits the website, Python web server process the request If the template contains React / Vue component, send request to the Node.js process to get the HTML of the React / Vue component After that, the final HTML will be returned to the browser. The browser will run JS and attach the event hanlders to the existing DOM elements. This also called rehydration","title":"Workflow"},{"location":"node_ssr_service/#packages","text":"django-react-templatetags hypernova will run as a service, which generate HTML of the React / Vue component (server side rendering)","title":"Packages"},{"location":"node_ssr_service/#pros-and-cons","text":"Pros: It is very flexible and SEO-friendly. Cons: This architecture is not very popular, and there are not many learning resources.","title":"Pros and Cons"},{"location":"node_ssr_service/#demo","text":"Django React SSR Demo","title":"Demo"},{"location":"react_vue_template/","text":"Launch React or Vue in template Use case Let's say you are building a Django project, for some reason, you need to add a complex dashboard page to the project. React or Vue seems good option here, however, you do not want to move the whole project to SPA , now this pattern can help you. You can use React or Vue to render the specific pages or specific components in your python web project. Workflow Notes: When user visit the website, Python web server process the request, render HTML. The browser download JS, run it to init React or Vue app Frontend We can create django-react project from django-react-boilerplate Or we can add React/Vue to the Webpack boilerplate ( python-webpack-boilerplate ), and then load the frontend app in Django template using the custom template tag. Pros and Cons Pros: We can develop in hybrid mode, for example, we can use React or Vue.js to build some complex components, and write other parts still using Django template or Jinja. Can still use some features such as form, built-auth. Cons The component rendered by React or Vue is not SEO friendly (same problem as SPA )","title":"React, Vue in template"},{"location":"react_vue_template/#launch-react-or-vue-in-template","text":"","title":"Launch React or Vue in template"},{"location":"react_vue_template/#use-case","text":"Let's say you are building a Django project, for some reason, you need to add a complex dashboard page to the project. React or Vue seems good option here, however, you do not want to move the whole project to SPA , now this pattern can help you. You can use React or Vue to render the specific pages or specific components in your python web project.","title":"Use case"},{"location":"react_vue_template/#workflow","text":"Notes: When user visit the website, Python web server process the request, render HTML. The browser download JS, run it to init React or Vue app","title":"Workflow"},{"location":"react_vue_template/#frontend","text":"We can create django-react project from django-react-boilerplate Or we can add React/Vue to the Webpack boilerplate ( python-webpack-boilerplate ), and then load the frontend app in Django template using the custom template tag.","title":"Frontend"},{"location":"react_vue_template/#pros-and-cons","text":"Pros: We can develop in hybrid mode, for example, we can use React or Vue.js to build some complex components, and write other parts still using Django template or Jinja. Can still use some features such as form, built-auth. Cons The component rendered by React or Vue is not SEO friendly (same problem as SPA )","title":"Pros and Cons"},{"location":"spa/","text":"SPA (single-page application) A single-page application (SPA) is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages. Workflow The frontend app is a static website which served by Nginx or other web server. When user visit the website, index.html is served and browser download JS, CSS files. The browser will then use the JS to init React / Vue app and build DOM tree. And then React / Vue app will interact with API backend through REST API or GraphQL protocol. Frontend We can use create-react-app to create a React application. We can use vue-cli to create Vue application. Backend Django For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project. Flask For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors FastAPI CORSMiddleware Pros and Cons Pros: Friendly to both frontend and backend developers, and there are many learning resources online about this architecture. The decoupled structure is clean, easy to understand. Cons: Can not benefit from some awesome Django, Flask features (templates, form, built-auth) The web application is not SEO friendly and is a little slow on first page load. References Wikipedia: Single-page application Demo React Django SPA Demo","title":"Single page application"},{"location":"spa/#spa-single-page-application","text":"A single-page application (SPA) is a web application or website that interacts with the user by dynamically rewriting the current web page with new data from the web server, instead of the default method of a web browser loading entire new pages.","title":"SPA (single-page application)"},{"location":"spa/#workflow","text":"The frontend app is a static website which served by Nginx or other web server. When user visit the website, index.html is served and browser download JS, CSS files. The browser will then use the JS to init React / Vue app and build DOM tree. And then React / Vue app will interact with API backend through REST API or GraphQL protocol.","title":"Workflow"},{"location":"spa/#frontend","text":"We can use create-react-app to create a React application. We can use vue-cli to create Vue application.","title":"Frontend"},{"location":"spa/#backend","text":"","title":"Backend"},{"location":"spa/#django","text":"For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project.","title":"Django"},{"location":"spa/#flask","text":"For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors","title":"Flask"},{"location":"spa/#fastapi","text":"CORSMiddleware","title":"FastAPI"},{"location":"spa/#pros-and-cons","text":"Pros: Friendly to both frontend and backend developers, and there are many learning resources online about this architecture. The decoupled structure is clean, easy to understand. Cons: Can not benefit from some awesome Django, Flask features (templates, form, built-auth) The web application is not SEO friendly and is a little slow on first page load.","title":"Pros and Cons"},{"location":"spa/#references","text":"Wikipedia: Single-page application","title":"References"},{"location":"spa/#demo","text":"React Django SPA Demo","title":"Demo"},{"location":"ssr/","text":"SSR (server-side-rendering) Background Let's first check why SSR is introduced and what problem it solves. If you create web app with SPA pattern, check the HTML source code, you will see something like this: < html lang = \"en\" > < head > < link href = \"/static/css/main.caf06914.chunk.css\" rel = \"stylesheet\" > </ head > < body > < div id = \"root\" ></ div > < script src = \"/static/js/2.20b865e0.chunk.js\" ></ script > < script src = \"/static/js/main.ed646a45.chunk.js\" ></ script > </ body > </ html > We notice some problems here: The above <div id=\"root\"></div> is empty, the search engine can not understand what the page is about without running the JS. The browser need to run some JS code to build the DOM tree (might need to send some extra requests), which make the web page is a little slow to load. Workflow Server-side rendering (SSR) is a popular technique for rendering a client-side single page application (SPA) on the server and then sending a fully rendered page to the client. This allows for dynamic components to be served as static HTML markup. Notes: When user visit the website, Node web server try to render component to HTML on the server side. The Node web server will send request to the api backend to fetch dynamic content After that, the HTML will be returned to the browser. The browser will run JS and attach the event handlers to the existing DOM elements. This also called rehydration Frontend We can use create-next-app to create a Next.js application (React). We can use create-nuxt-app to create Nuxt.js application (Vue). Backend Django For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project. Flask For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors FastAPI CORSMiddleware Pros and Cons Pros: Good performance (First Paint (FP) and First Contentful Paint (FCP)) The web app supports SEO very well. Cons: Can not benefit from some awesome Django, Flask features (templates, form, built-auth) Resources Rendering on the Web","title":"Server side rendering"},{"location":"ssr/#ssr-server-side-rendering","text":"","title":"SSR (server-side-rendering)"},{"location":"ssr/#background","text":"Let's first check why SSR is introduced and what problem it solves. If you create web app with SPA pattern, check the HTML source code, you will see something like this: < html lang = \"en\" > < head > < link href = \"/static/css/main.caf06914.chunk.css\" rel = \"stylesheet\" > </ head > < body > < div id = \"root\" ></ div > < script src = \"/static/js/2.20b865e0.chunk.js\" ></ script > < script src = \"/static/js/main.ed646a45.chunk.js\" ></ script > </ body > </ html > We notice some problems here: The above <div id=\"root\"></div> is empty, the search engine can not understand what the page is about without running the JS. The browser need to run some JS code to build the DOM tree (might need to send some extra requests), which make the web page is a little slow to load.","title":"Background"},{"location":"ssr/#workflow","text":"Server-side rendering (SSR) is a popular technique for rendering a client-side single page application (SPA) on the server and then sending a fully rendered page to the client. This allows for dynamic components to be served as static HTML markup. Notes: When user visit the website, Node web server try to render component to HTML on the server side. The Node web server will send request to the api backend to fetch dynamic content After that, the HTML will be returned to the browser. The browser will run JS and attach the event handlers to the existing DOM elements. This also called rehydration","title":"Workflow"},{"location":"ssr/#frontend","text":"We can use create-next-app to create a Next.js application (React). We can use create-nuxt-app to create Nuxt.js application (Vue).","title":"Frontend"},{"location":"ssr/#backend","text":"","title":"Backend"},{"location":"ssr/#django","text":"For Django dev, we might also need below packages. Django REST framework which will help build REST API. dj-rest-auth or djoser for auth API support. django-cors-headers will help solve Cross-Origin Resource Sharing (CORS) issue. graphene-django Integrate GraphQL into your Django project.","title":"Django"},{"location":"ssr/#flask","text":"For Flask dev, we might also need below packages. flask-restful flask-api flask-graphql flask-cors","title":"Flask"},{"location":"ssr/#fastapi","text":"CORSMiddleware","title":"FastAPI"},{"location":"ssr/#pros-and-cons","text":"Pros: Good performance (First Paint (FP) and First Contentful Paint (FCP)) The web app supports SEO very well. Cons: Can not benefit from some awesome Django, Flask features (templates, form, built-auth)","title":"Pros and Cons"},{"location":"ssr/#resources","text":"Rendering on the Web","title":"Resources"}]}